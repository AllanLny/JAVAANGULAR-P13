package com.ycyw.chatservice.controller;

import com.ycyw.chatservice.dto.ChatMessageDto;
import com.ycyw.chatservice.dto.ChatThreadDto;
import com.ycyw.chatservice.service.ChatService;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/chat")
public class ChatController {
    private final ChatService chatService;
    private final SimpMessagingTemplate messagingTemplate;

    public ChatController(ChatService chatService, SimpMessagingTemplate messagingTemplate) {
        this.chatService = chatService;
        this.messagingTemplate = messagingTemplate;
    }

    @MessageMapping("/send/user")
    public void handleUserMessage(ChatMessageDto message) {
        ChatMessageDto savedMessage = chatService.userSendMessage(message.getSenderId(), message.getMessage());
        messagingTemplate.convertAndSend("/topic/thread/" + savedMessage.getThreadId(), savedMessage);
    }

    @MessageMapping("/send/support")
    public void handleSupportMessage(ChatMessageDto message) {
        ChatMessageDto savedMessage = chatService.supportSendMessage(message.getThreadId(), message.getMessage());
        messagingTemplate.convertAndSend("/topic/thread/" + message.getThreadId(), savedMessage);
    }

    // Endpoints REST pour le chargement initial et la compatibilit√©
    @GetMapping("/threads")
    public List<ChatThreadDto> getAllThreads() {
        return chatService.getAllThreads();
    }

    @GetMapping("/user/{userId}/threads")
    public List<ChatThreadDto> getUserThreads(@PathVariable Long userId) {
        return chatService.getThreadsByUser(userId);
    }

    @GetMapping("/threads/{threadId}/messages")
    public List<ChatMessageDto> getMessages(@PathVariable Long threadId) {
        return chatService.getMessages(threadId);
    }

    @PostMapping("/user/{userId}/message")
    public ChatMessageDto userSendMessage(@PathVariable Long userId, @RequestBody ChatMessageDto msg) {
        ChatMessageDto savedMessage = chatService.userSendMessage(userId, msg.getMessage());
        messagingTemplate.convertAndSend("/topic/thread/" + savedMessage.getThreadId(), savedMessage);
        return savedMessage;
    }

    @PostMapping("/threads/{threadId}/support-message")
    public ChatMessageDto supportSendMessage(@PathVariable Long threadId, @RequestBody ChatMessageDto msg) {
        ChatMessageDto savedMessage = chatService.supportSendMessage(threadId, msg.getMessage());
        messagingTemplate.convertAndSend("/topic/thread/" + threadId, savedMessage);
        return savedMessage;
    }
}