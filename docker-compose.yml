services:
  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./create_db.sql:/docker-entrypoint-initdb.d/create_db.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped

  chat-service:
    build:
      context: ./backend-chat-service
    ports:
      - "8082:8082"
    networks:
      - app-network

  user-service:
    build: 
      context: ./backend-user-service
      dockerfile: Dockerfile
      args:
        JAVA_OPTS: ${JAVA_OPTS}
    container_name: user-service
    networks:
      - app-network
    depends_on:
      - postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      JAVA_OPTS: ${JAVA_OPTS}
    ports:
      - "8081:8081"
    restart: unless-stopped

  gateway-service:
    build: 
      context: ./backend-gateway
      dockerfile: Dockerfile
      args:
        JAVA_OPTS: ${JAVA_OPTS}
    container_name: gateway-service
    networks:
      - app-network
    depends_on:
      - chat-service
      - user-service
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      JAVA_OPTS: ${JAVA_OPTS}
    ports:
      - "8080:8080"

    restart: unless-stopped

  frontend:
    build: 
      context: ./your-car-your-way
      dockerfile: Dockerfile
    container_name: frontend
    networks:
      - app-network
    depends_on:
      - gateway-service
    ports:
      - "4200:4200"

    environment:
      - NODE_ENV=production
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
    name: poc-network

volumes:
  postgres_data:
    name: poc-postgres-data